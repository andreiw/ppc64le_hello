ppc64le_hello - ``Hello World'' for a Little-Endian OpenPower world
===================================================================

This is an example of running a 64-bit little-endian payload using
skiboot (https://github.com/open-power/skiboot) or another OPAL
firmware.

It shows the bare minimum needed to start writing
a little-endian kernel for the OpenPower ecosystem. Whereas
skiboot/test/hello_world is big-endian, this shows how
to make OPAL calls from LE as well as other minutiae like
setting up a basic C environment.

What you get:
- 64-bit real-mode HV LE operation
- logging via sim inteface (mambo_write)
- logging via OPAL firmware (opal_write)
- calling C code, stack/BSS/linkage setup/TOC
- calling BE code from LE
- FDT parsing, dumping FDT

There's some ongoing work on setting up the MMU in 1:1 mode. Come back soon.
Today there's just the code to initialize the SLB with an identity EA->VA
mapping for the first 1TB. No HTAB code yet (damn paternity leave ending!),
but at some point you'll be able to interactively turn it on and off
and see a difference :-D. This will also need exception handling working.
Heh.

Hopefully the code is clear enough and not too messy. I'm not trying hard
enough ;-(.

Building
========

You will need a LE 64-bit toolchain to build (i.e. powerpc64le-linux-gnu-gcc).
For building skiboot (for testing) you will also need the BE 64-bit
toolchain (i.e. powerpc64-linux-gnu-gcc).

Skiboot is pulled-in as a submodule. 

You will need the POWER8 Functional Simulator set up. Good directions: https://www.flamingspork.com/blog/2014/12/03/running-skiboot-opal-on-the-power8-simulator/

$ make

Running
=======

$ make test

This will run the simulator and pop-up an xterm for OPAL console 0. If you
don't like xterm, feel free to change it in ppc64le_hello.tcl.

You're looking for output like -
...
14850345: (14850345): [14846541,3] ELOG: Error getting buffer to log error
19043637: (19043637): [19037248,5] INIT: Starting kernel at 0x20010000, fdt at 0x30203458 (size 0x114c)
19043950: (19043948): Hello Mambo!
19044713: (19044711): Hello OPAL!
19045321: (19045319): _start = 0x20010000
19057843: (19057537): _bss   = 0x20016000
19070365: (19069755): _stack = 0x20016000
19082887: (19081973): _end   = 0x20017000
19095418: (19094200): KPCR   = 0x2001016C
19107950: (19106428): OPAL   = 0x30000000
19120471: (19118645): FDT    = 0x30203458
19189263: (19187133): SLB size = 0x20
19231806: (19229600): TB freq = 0x1E848000

19245612: (19243100): Pick your poison:
19256516: (19254004): Choices: 
19262355: (19259843):    (f) dump FDT
19271680: (19269168):    (s) dump SLB
19281005: (19278493):    (q) poweroff
...

You can interact with this, (q) will shut down the sim.

You should be able to run ppc64le_hello on a real Power8 machine via skiboot,
but you will need to comment out the call to mambo_write, as that is a
simulator-only facility.

Wish I had Power8 kit to play with ;-(.

Resources
=========

Useful stuff:
- PowerISA_V2.07_PUBLIC.pdf            - Book 3S
- ABI53BitOpenPOWER_21July2014_pub.pdf - ELFv2 ABI used for PPC64LE

Contact Info
============

Andrei Warkentin (andrey.warkentin@gmail.com).
