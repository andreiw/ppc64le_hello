ppc64le_hello - ``Hello World'' for a Little-Endian OpenPower world
===================================================================

This is an example of running a 64-bit little-endian payload using
skiboot (https://github.com/open-power/skiboot) or another OPAL
firmware.

It shows the bare minimum needed to start writing
a little-endian kernel for the OpenPower ecosystem. Whereas
skiboot/test/hello_world is big-endian, this shows how
to make OPAL calls from LE as well as other minutiae like
setting up a basic C environment.

What you get:
- 64-bit real-mode HV LE operation
- logging via sim inteface (mambo_write)
- logging via OPAL firmware (opal_write)
- calling C code, stack/BSS/linkage setup/TOC
- calling BE code from LE
- FDT parsing, dumping FDT
- Taking and returning from exceptions, handling
  unrecoverable/nested exceptions.
- Timebase (i.e. the "timestamp counter"), decrementer
  and hypervisor decrementer manipulation.
- Very basic MMU setup (1:1 EA->VA mapping using a 1TB
  SLB entry, and 1:1 VA->RA mapping and mixed page support.
  Base page size is 4K, and actual page size is 4K and 16M.
  Not SMP safe. Note that since only a few areas are mapped at boot,
  attempt to access an unmapped area with the MMU on will force the
  MMU off (see exc.c).
- Running unpriviledged code.

Hopefully the code is clear enough and not too messy. I'm not trying hard
enough ;-(. I think the only code that has had any thought put into it
is the exception vectors, and other places look especially crappy because
I wanted to avoid writing an actual kernel.

Building
========

You will need a LE 64-bit toolchain to build (i.e. powerpc64le-linux-gnu-gcc).
For building skiboot (for testing) you will also need the BE 64-bit
toolchain (i.e. powerpc64-linux-gnu-gcc).

Skiboot is pulled-in as a submodule. 

You will need the POWER8 Functional Simulator set up. Good directions: https://www.flamingspork.com/blog/2014/12/03/running-skiboot-opal-on-the-power8-simulator/

$ make

Running
=======

$ make test

This will run the simulator and pop-up an xterm for OPAL console 0. If you
don't like xterm, feel free to change it in ppc64le_hello.tcl.

You're looking for output like -
...
20295980: (20295980): [20289411000,5] INIT: Starting kernel at 0x20010000, fdt at 0x303039f0 (size 0x13b4)
20296456: (20296454): Hello Mambo!
20297225: (20297223): Hello OPAL!
20297843: (20297841): _start = 0x20010000
20310575: (20310269): _bss   = 0x20018538
20323307: (20322697): _stack = 0x20019000
20336039: (20335125): _end   = 0x2001B000
20348780: (20347562): KPCR   = 0x20018570
20361522: (20360000): OPAL   = 0x30000000
20374253: (20372427): FDT    = 0x303039F0
20443255: (20441125): SLB size = 0x20
20485972: (20483766): TB freq = 512000000
20502926: (20500378): [20498453000,3] OPAL: Trying a CPU re-init with flags: 0x2
20511868: (20509320): [20504166000,3] SLW: Not found on chip 0
20516105: (20513557): [20512121000,3] ELOG: Error getting buffer to log error
20516826: (20514278): OPAL claims no HILE supported, pretend to know better...
20551049: (20548501): Unrecoverable exception stack top @ 0x2001AEC8
20583250: (20580393): HTAB (2048 ptegs, mask 0x7FF, size 0x40000) @ 0x20040000
20749838: (20746219): SLB entries:
20758132: (20754475): 1: E 0x8000000 V 0x4000000000000400

20809876: (20805195): Pick your poison:
20821008: (20816327): Choices: (MMU = disabled):
20837045: (20832364):    (d) 5s delay
20846530: (20841849):    (e) test exception
20859561: (20854880):    (n) test nested exception
20876729: (20872048):    (f) dump FDT
20886214: (20881533):    (M) enable MMU
20896881: (20892200):    (m) disable MMU
20908139: (20903458):    (t) test MMU
20917624: (20912943):    (T) test MMU 16mb pages
20933610: (20928929):    (u) test non-priviledged code
20953142: (20948461):    (I) enable ints
20964400: (20959719):    (i) disable ints
20976249: (20971568):    (H) enable HV dec
20988689: (20984008):    (h) disable HV dec
21001720: (20997039):    (q) poweroff

You can interact with this:
(d) poll the timebase registers until 5s of real time pass.
(e) tests triggering a system call with parameter 0xfeed. The system
    call handler will return back parameter << 16 | 0xface, i.e. 0xfeedface.
(n) tests triggering an exception from an exception by triggering
    a system call with parameter 0xdead. The exc.c logic keys off the parameter
    to trigger another exception, expectedly crashing the system, thus testing
    that the exc.c code can distinguish between recoverable and non-recoverable
    exceptions and handle them appropriately.
(f) dumps the FDT passed up by skiboot. I don't try very hard. This code needs
    improvement and its just glue around parts of libfdt.
(M) enables running with MSR.IR and MSR.DR. The page table and SLB are setup at
    boot to map 1:1 (EA->RA) exactly the memory between &_start and &_end. Any
    DSI/ISI turns off the MMU. Exceptions never keep MMU on inside the
     exceptions.
(m) disables MSR.IR and MSR.DR, disabling MMU.
(t) simple test for MMU code, mapping the same EA to different RAs and verifying
    that the 4K mapping worked.
(T) simple 16MB page size mapping test.
(u) shows running unpriviledged code. There's no scheduler, process/thread
    support so the hand-off between code is messy. We enter user code via
    syscall, saving off the exception frame for a subsequent return from user
    code, again via syscall.
(I) enables external interrupts (MSR.EE). You will start seeing decrementer
    exceptions.
(i) disables external interrupts. You will no longer see any decrementer
    or HV decrementer exceptions.
(H) enables HV decrementer. If exernal interrupts are on, you will start
    seeting hypervisor decrementer exceptions.
(h) disable HV decrementer. You will no longer see any HV decrementer
    exceptions.
(q) will shut down the sim using the attn instruction.

You should be able to run ppc64le_hello on a real Power8 machine via skiboot,
but you will need to comment out the call to mambo_write, as that is a
simulator-only facility.

Wish I had Power8 kit to play with ;-(.

Issues
======

Q: Delay test seems to run longer or shorter than 5s wall clock.
A: From benh: "The way mambo (aka systemsim) works, there is no expectation
               that the simulated timebase has any relationship whatsoever
               to wall clock outside of sim. All you can do really is play
               with the ratio emulated CPU cycles / TB cycles."
   ...change processor/cpu_frequency and processor/timebase_frequency
   inside ppc64le_hello.tcl. On my machine (i5-2410M) the TB should run
   about 1000 times faster than clock.

TODO
====

- Maybe show more callthru sim facilities? Like file I/O...
- Spinlocks

Resources
=========

Useful stuff:
- PowerISA_V2.07_PUBLIC.pdf             - Book 3S
- ABI53BitOpenPOWER_21July2014_pub.pdf  - ELFv2 ABI used for PPC64LE
- P8_um_external_v1.1_2015JAN29_pub.pdf - POWER8 User Manual

Contact Info
============

Andrei Warkentin (andrey.warkentin@gmail.com).
