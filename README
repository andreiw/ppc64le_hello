ppc64le_hello - ``Hello World'' for a Little-Endian OpenPower world
===================================================================

This is an example of running a 64-bit little-endian payload using
skiboot (https://github.com/open-power/skiboot) or another OPAL
firmware.

It shows the bare minimum needed to start writing
a little-endian kernel for the OpenPower ecosystem. Whereas
skiboot/test/hello_world is big-endian, this shows how
to make OPAL calls from LE as well as other minutiae like
setting up a basic C environment.

What you get:
- 64-bit real-mode HV LE operation
- logging via sim inteface (mambo_write)
- logging via OPAL firmware (opal_write)
- calling C code, stack/BSS/linkage setup/TOC
- calling BE code from LE
- FDT parsing, dumping FDT
- Taking and returning from exceptions, handling
  unrecoverable/nested exceptions.
- Timebase (i.e. the "timestamp counter"), decrementer
  and hypervisor decrementer manipulation.
- Very basic MMU setup (1:1 EA->VA mapping using a 1TB
  SLB entry, and 1:1 VA->RA mapping using 4K pages
  for memory between &_start and &_end. Not SMP safe.
  Note that since only a few areas are mapped, attempt
  to access an unmapped area with the MMU on will force
  the MMU off (see exc.c).

Hopefully the code is clear enough and not too messy. I'm not trying hard
enough ;-(.

Building
========

You will need a LE 64-bit toolchain to build (i.e. powerpc64le-linux-gnu-gcc).
For building skiboot (for testing) you will also need the BE 64-bit
toolchain (i.e. powerpc64-linux-gnu-gcc).

Skiboot is pulled-in as a submodule. 

You will need the POWER8 Functional Simulator set up. Good directions: https://www.flamingspork.com/blog/2014/12/03/running-skiboot-opal-on-the-power8-simulator/

$ make

Running
=======

$ make test

This will run the simulator and pop-up an xterm for OPAL console 0. If you
don't like xterm, feel free to change it in ppc64le_hello.tcl.

You're looking for output like -
...
20295980: (20295980): [20289411000,5] INIT: Starting kernel at 0x20010000, fdt at 0x303039f0 (size 0x13b4)
20296330: (20296328): Hello Mambo!
20297096: (20297094): Hello OPAL!
20297709: (20297707): _start = 0x20010000
20310336: (20310030): _bss   = 0x20017B28
20322963: (20322353): _stack = 0x20018000
20335590: (20334676): _end   = 0x2001B000
20348226: (20347008): KPCR   = 0x20017B48
20360863: (20359341): OPAL   = 0x30000000
20373489: (20371663): FDT    = 0x303039F0
20442386: (20440256): SLB size = 0x20
20485018: (20482812): TB freq = 512000000
20501867: (20499319): [20497394000,3] OPAL: Trying a CPU re-init with flags: 0x2
20510809: (20508261): [20503107000,3] SLW: Not found on chip 0
20515046: (20512498): [20511062000,3] ELOG: Error getting buffer to log error
20515762: (20513214): OPAL claims no HILE supported, pretend to know better...
20549695: (20547147): Unrecoverable exception stack top @ 0x20019EC8
20578178: (20575326): Recoverable exception stack top @ 0x2001B000
20608358: (20605200): HTAB (2048 ptegs, mask 0x7FF, size 0x40000) @ 0x20040000
20774656: (20770736): SLB entries:
20782880: (20778922): 1: E 0x8000000 V 0x4000000000000400
20806614: (20801782): EA 0x20040000 -> hash 0x20040 -> pteg 0x200 = RA 0x20040000
...
23569587: (23497351): EA 0x2001A000 -> hash 0x2001A -> pteg 0xD0 = RA 0x2001A000

23607506: (23534392): Pick your poison:
23618543: (23545429): Choices: (MMU = disabled):
23634445: (23561331):    (d) 5s delay
23643850: (23570736):    (e) test exception
23656771: (23583657):    (n) test nested exception
23673794: (23600680):    (f) dump FDT
23683199: (23610085):    (M) enable MMU
23693776: (23620662):    (m) disable MMU
23704939: (23631825):    (t) test MMU
23714344: (23641230):    (I) enable ints
23725507: (23652393):    (i) disable ints
23737256: (23664142):    (H) enable HV dec
23749591: (23676477):    (h) disable HV dec
23762512: (23689398):    (q) poweroff

You can interact with this:
(d) poll the timebase registers until 5s of real time pass.
(e) tests triggering a system call with parameter 0xfeed. The system
    call handler will return back parameter << 16 | 0xface, i.e. 0xfeedface.
(n) tests triggering an exception from an exception by triggering
    a system call with parameter 0xdead. The exc.c logic keys off the parameter
    to trigger another exception, expectedly crashing the system, thus testing
    that the exc.c code can distinguish between recoverable and non-recoverable
    exceptions and handle them appropriately.
(f) dumps the FDT passed up by skiboot. I don't try very hard. This code needs
    improvement and its just glue around parts of libfdt.
(M) enables running with MSR.IR and MSR.DR. The page table and SLB are setup at
    boot to map 1:1 (EA->RA) exactly the memory between &_start and &_end. Any
    DSI/ISI turns off the MMU.
(m) disables MSR.IR and MSR.DR, disabling MMU.
(t) simple test for MMU code, mapping the same EA to different RAs and verifying
    that the mapping worked.
(I) enables external interrupts (MSR.EE). You will start seeing decrementer
    exceptions.
(i) disables external interrupts. You will no longer see any decrementer
    or HV decrementer exceptions.
(H) enables HV decrementer. If exernal interrupts are on, you will start
    seeting hypervisor decrementer exceptions.
(h) disable HV decrementer. You will no longer see any HV decrementer
    exceptions.
(q) will shut down the sim using the attn instruction.

You should be able to run ppc64le_hello on a real Power8 machine via skiboot,
but you will need to comment out the call to mambo_write, as that is a
simulator-only facility.

Wish I had Power8 kit to play with ;-(.

Issues
======

Q: Delay test seems to run longer or shorter than 5s wall clock.
A: From benh: "The way mambo (aka systemsim) works, there is no expectation that the
               simulated timebase has any relationship whatsoever to wall clock outside
               of sim. All you can do really is play with the ratio emulated CPU
               cycles / TB cycles."
   ...change processor/cpu_frequency and processor/timebase_frequency. On my
   machine (i5-2410M) the TB should run about 1000 times faster than clock.

Resources
=========

Useful stuff:
- PowerISA_V2.07_PUBLIC.pdf            - Book 3S
- ABI53BitOpenPOWER_21July2014_pub.pdf - ELFv2 ABI used for PPC64LE

Contact Info
============

Andrei Warkentin (andrey.warkentin@gmail.com).
