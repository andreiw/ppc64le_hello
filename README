ppc64le_hello - ``Hello World'' for a Little-Endian OpenPower world
===================================================================

This is an example of running a 64-bit little-endian payload using
skiboot (https://github.com/open-power/skiboot) or another OPAL
firmware.

It shows the bare minimum needed to start writing
a little-endian kernel for the OpenPower ecosystem. Whereas
skiboot/test/hello_world is big-endian, this shows how
to make OPAL calls from LE as well as other minutiae like
setting up a basic C environment.

What you get:
- 64-bit real-mode HV LE operation
- logging via sim inteface (mambo_write)
- logging via OPAL firmware (opal_write)
- calling C code, stack/BSS/linkage setup/TOC
- calling BE code from LE
- FDT parsing, dumping FDT
- Taking and returning from exceptions, handling
  unrecoverable/nested exceptions.
- Timebase (i.e. the "timestamp counter"), decrementer
  and hypervisor decrementer manipulation with some basic timer
  support (done for periodic callbacks into OPAL).
- Running at HV alias addresses (loaded at 0x00000000200XXXXX,
  linked at 0x80000000200XXXXX). The idea being that the code
  will access physical RAM and its own data structures solely
  using the HV addresses.
- SLB setup: demonstrates 1T segments with 4K base page
  and 16M base page size. One segment (slot = 0) is used
  to back the HV alias addresses with 16M pages. Another
  segment maps EA to VA 1:1 using 4K pages.
- Very basic HTAB setup. Mapping and unmapping for pages
  in the 4K and 16M segments, supporting MPSS (16M pages
  in the 4K segment). No secondary PTEG. No eviction support.
  Not SMP safe. Any access within the HV alias addresses
  get mapped in. Any faults to other unmapped locations are
  crashes, as addresses below 0x8000000000000000 should only
  be explicit maps.
- Running unpriviledged code.

Hopefully the code is clear enough and not too messy. I'm not trying hard
enough ;-(. I think the only code that has had any thought put into it
is the exception vectors, and other places look especially crappy because
I wanted to avoid writing an actual kernel.

Building
========

You will need a LE 64-bit toolchain to build (i.e. powerpc64le-linux-gnu-gcc).
For building skiboot (for testing) you will also need the BE 64-bit
toolchain (i.e. powerpc64-linux-gnu-gcc).

Skiboot is pulled-in as a submodule. 

You will need the POWER8 Functional Simulator set up. Good directions: https://www.flamingspork.com/blog/2014/12/03/running-skiboot-opal-on-the-power8-simulator/

$ make

In the unlikely event you're trying this on real hardware.

$ make CONFIG_NOSIM=1

Running
=======

$ make test

This will run the simulator and pop-up an xterm for OPAL console 0. If you
don't like xterm, feel free to change it in ppc64le_hello.tcl.

You're looking for output like -
...
20307706: (20307706): [20301137000,5] INIT: Starting kernel at 0x20010000, fdt at 0x30303a08 (size 0x13cc)
20308235: (20308233): Hello Mambo!
20309048: (20309046): Hello OPAL!
20309711: (20309709): _start = 0x8000000020010000
20328913: (20328303): _bss   = 0x800000002001A740
20348115: (20346897): _stack = 0x800000002001B000
20367317: (20365491): _end   = 0x800000002001C000
20386528: (20384094): KPCR   = 0x800000002001A7E0
20405740: (20402698): TOC    = 0x8000000020022700
20424952: (20421302): OPAL   = 0x30000000
20438649: (20434695): FDT    = 0x30303A08
20549859: (20545601): SLB size = 0x20
20593358: (20589024): TB freq = 512000000
20611573: (20606897): [20607100000,3] OPAL: Trying a CPU re-init with flags: 0x2
20620515: (20615839): [20612813000,3] SLW: Not found on chip 0
20624752: (20620076): [20620768000,3] ELOG: Error getting buffer to log error
20625518: (20620842): OPAL claims no HILE supported, pretend to know better...
20662440: (20657764): Unrecoverable exception stack top @ 0x800000002001CEC8
20702356: (20697067): HTAB (2048 ptegs, mask 0x7FF, size 0x40000) @ 0x8000000020040000
20877213: (20870858): SLB entries:
20886126: (20879733): 0: E 0x8000000008000000 V 0x4000000001000500
20917189: (20909542): 1: E 0x8000000 V 0x4000000000000400

21001608: (20993084): Pick your poison:
21013614: (21005090): Choices: (MMU = disabled):
21030925: (21022401):    (d) 5s delay
21041146: (21032622):    (D) toggle 5s timer
21055826: (21047302):    (e) test exception
21069869: (21061345):    (n) test nested exception
21088371: (21079847):    (f) dump FDT
21098592: (21090068):    (M) enable MMU
21110087: (21101563):    (m) disable MMU
21122219: (21113695):    (t) test MMU
21132440: (21123916):    (T) test MMU 16mb pages
21149668: (21141144):    (u) test non-priviledged code
21170718: (21162194):    (H) enable HV dec
21184124: (21175600):    (h) disable HV dec
21198167: (21189643):    (q) poweroff

You can interact with this:
---------------------------
(d) poll the timebase registers until 5s of real time pass.
(D) toggles a periodic timer callback every 5s.
(e) tests triggering a system call with parameter 0xfeed. The system
    call handler will return back parameter << 16 | 0xface, i.e. 0xfeedface.
(n) tests triggering an exception from an exception by triggering
    a system call with parameter 0xdead. The exc.c logic keys off the parameter
    to trigger another exception, expectedly crashing the system, thus testing
    that the exc.c code can distinguish between recoverable and non-recoverable
    exceptions and handle them appropriately.
(f) dumps the FDT passed up by skiboot. I don't try very hard. This code needs
    improvement and its just glue around parts of libfdt.
(M) enables running with MSR.IR and MSR.DR. HTAB and memory between &_start
    and &_end are mapped. Any  DSI/ISI turns off the MMU. Exceptions never keep
    MMU on inside the exceptions.
(m) disables MSR.IR and MSR.DR, disabling MMU.
(t) simple test for MMU code, mapping the same EA to different RAs and verifying
    that the 4K mapping worked.
(T) simple 16MB page size mapping test.
(u) shows running unpriviledged code. There's no scheduler, process/thread
    support so the hand-off between code is messy. We enter user code via
    syscall, saving off the exception frame for a subsequent return from user
    code, again via syscall.
(H) enables HV decrementer. You will start seeing hypervisor decrementer
    exceptions.
(h) disable HV decrementer. You will no longer see any HV decrementer
    exceptions.
(q) will shut down the sim using the attn instruction.

You should be able to run ppc64le_hello on a real Power8 machine via skiboot,
but you will need to build with CONFIG_NOSIM=1. It has been successfully done
before, but that was before I wrote most of the MMU code ;-). See Daniel
Axtens' blog post:

http://sthbrx.github.io/blog/2015/06/03/ppc64le-hello-on-real-hardware/

Issues
======

Q: Delay test seems to run longer or shorter than 5s wall clock.
A: From benh: "The way mambo (aka systemsim) works, there is no expectation
               that the simulated timebase has any relationship whatsoever
               to wall clock outside of sim. All you can do really is play
               with the ratio emulated CPU cycles / TB cycles."
   ...change processor/cpu_frequency and processor/timebase_frequency
   inside ppc64le_hello.tcl. On my machine (i5-2410M) the TB should run
   about 1000 times faster than clock.

Q: Something doesn't work on real hardware!
A: Please file an issue and let me know! Daniel Axtens identified a number
   of issues which I believe to have resolved, but I only get to play in
   a simulator.

TODO
====

- Maybe show more callthru sim facilities? Like file I/O...
- Spinlocks
- AIL for interrupt vectors
- SMP

Resources
=========

Useful stuff:
- PowerISA_V2.07_PUBLIC.pdf             - Book 3S
- ABI53BitOpenPOWER_21July2014_pub.pdf  - ELFv2 ABI used for PPC64LE
- P8_um_external_v1.1_2015JAN29_pub.pdf - POWER8 User Manual

Contact Info
============

Andrei Warkentin (andrey.warkentin@gmail.com).
