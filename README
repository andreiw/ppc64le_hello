ppc64le_hello - ``Hello World'' for a Little-Endian OpenPower world
===================================================================

This is an example of running a 64-bit little-endian payload using
skiboot (https://github.com/open-power/skiboot) or another OPAL
firmware.

It shows the bare minimum needed to start writing
a little-endian kernel for the OpenPower ecosystem. Whereas
skiboot/test/hello_world is big-endian, this shows how
to make OPAL calls from LE as well as other minutiae like
setting up a basic C environment.

What you get:
- 64-bit real-mode HV LE operation
- logging via sim inteface (mambo_write)
- logging via OPAL firmware (opal_write)
- calling C code, stack/BSS/linkage setup/TOC
- calling BE code from LE
- FDT parsing, dumping FDT
- Taking and returning from exceptions, handling
  unrecoverable/nested exceptions.
- Timebase (i.e. the "timestamp counter"), decrementer
  and hypervisor decrementer manipulation.

There's some ongoing work on setting up the MMU in 1:1 mode. Come back soon.
Today there's just the code to initialize the SLB with an identity EA->VA
mapping for the first 1TB. No HTAB code yet (damn paternity leave ending!),
but at some point you'll be able to interactively turn it on and off
and see a difference :-D.

Hopefully the code is clear enough and not too messy. I'm not trying hard
enough ;-(.

Building
========

You will need a LE 64-bit toolchain to build (i.e. powerpc64le-linux-gnu-gcc).
For building skiboot (for testing) you will also need the BE 64-bit
toolchain (i.e. powerpc64-linux-gnu-gcc).

Skiboot is pulled-in as a submodule. 

You will need the POWER8 Functional Simulator set up. Good directions: https://www.flamingspork.com/blog/2014/12/03/running-skiboot-opal-on-the-power8-simulator/

$ make

Running
=======

$ make test

This will run the simulator and pop-up an xterm for OPAL console 0. If you
don't like xterm, feel free to change it in ppc64le_hello.tcl.

You're looking for output like -
...
19028625: (19028623): Hello Mambo!
19029388: (19029386): Hello OPAL!
19029996: (19029994): _start = 0x20010000
19042518: (19042212): _bss   = 0x20016420
19055040: (19054430): _stack = 0x20017000
19067562: (19066648): _end   = 0x20019000
19080093: (19078875): KPCR   = 0x20016420
19092625: (19091103): OPAL   = 0x30000000
19105146: (19103320): FDT    = 0x30203458
19173938: (19171808): SLB size = 0x20
19216485: (19214279): TB freq = 512000000
19232692: (19230144): [37,3] OPAL: Trying a CPU re-init with flags: 0x2
19241097: (19238549): [37,3] SLW: Not found on chip 0
19244797: (19242249): [37,3] ELOG: Error getting buffer to log error
19245508: (19242960): OPAL claims no HILE supported, pretend to know better...
19279135: (19276587): Exception stack top @ 0x20018FE0
19299231: (19296379): Exception handler @ 0x20015364

19357385: (19353921): Pick your poison:
20619415: (20616255): Choices:
20624691: (20621531):    (d) 5s delay
20634048: (20630888):    (e) test exception
20646903: (20643743):    (n) test nested exception
20663839: (20660679):    (f) dump FDT
20673196: (20670036):    (s) dump SLB
20682553: (20679393):    (I) enable ints
20693659: (20690499):    (i) disable ints
20705348: (20702188):    (H) enable HV dec
20717620: (20714460):    (h) disable HV dec
20730475: (20727315):    (q) poweroff

You can interact with this, (q) will shut down the sim.

You should be able to run ppc64le_hello on a real Power8 machine via skiboot,
but you will need to comment out the call to mambo_write, as that is a
simulator-only facility.

Wish I had Power8 kit to play with ;-(.

Issues
======

Q: Delay test seems to run longer or shorter than 5s wall clock.
A: From benh: "The way mambo (aka systemsim) works, there is no expectation that the
               simulated timebase has any relationship whatsoever to wall clock outside
               of sim. All you can do really is play with the ratio emulated CPU
               cycles / TB cycles."
   ...change processor/cpu_frequency and processor/timebase_frequency. On my
   machine (i5-2410M) the TB should run about 1000 times faster than clock.

Resources
=========

Useful stuff:
- PowerISA_V2.07_PUBLIC.pdf            - Book 3S
- ABI53BitOpenPOWER_21July2014_pub.pdf - ELFv2 ABI used for PPC64LE

Contact Info
============

Andrei Warkentin (andrey.warkentin@gmail.com).
