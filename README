ppc64le_hello - ``Hello World'' for a Little-Endian OpenPower world
===================================================================

This is an example of running a 64-bit little-endian payload using
skiboot (https://github.com/open-power/skiboot) or another OPAL
firmware.

It shows the bare minimum needed to start writing
a little-endian kernel for the OpenPower ecosystem. Whereas
skiboot/test/hello_world is big-endian, this shows how
to make OPAL calls from LE as well as other minutiae like
setting up a basic C environment.

What you get:
- 64-bit real-mode HV LE operation
- logging via sim inteface (mambo_write)
- logging via OPAL firmware (opal_write)
- calling C code, stack/BSS/linkage setup/TOC
- calling BE code from LE
- FDT parsing, dumping FDT
- Taking and returning from exceptions, handling
  unrecoverable/nested exceptions.
- Timebase (i.e. the "timestamp counter"), decrementer
  and hypervisor decrementer manipulation.
- Very basic MMU setup (1:1 EA->VA mapping using a 1TB
  SLB entry, and 1:1 VA->RA mapping using 4K pages
  for memory between &_start and &_end. Not SMP safe.
  Note that since only a few areas are mapped, attempt
  to access an unmapped area with the MMU on will force
  the MMU off (see exc.c).

Hopefully the code is clear enough and not too messy. I'm not trying hard
enough ;-(.

Building
========

You will need a LE 64-bit toolchain to build (i.e. powerpc64le-linux-gnu-gcc).
For building skiboot (for testing) you will also need the BE 64-bit
toolchain (i.e. powerpc64-linux-gnu-gcc).

Skiboot is pulled-in as a submodule. 

You will need the POWER8 Functional Simulator set up. Good directions: https://www.flamingspork.com/blog/2014/12/03/running-skiboot-opal-on-the-power8-simulator/

$ make

Running
=======

$ make test

This will run the simulator and pop-up an xterm for OPAL console 0. If you
don't like xterm, feel free to change it in ppc64le_hello.tcl.

You're looking for output like -
...
20295980: (20295980): [20289411000,5] INIT: Starting kernel at 0x20010000, fdt at 0x303039f0 (size 0x13b4)
20296330: (20296328): Hello Mambo!
20297095: (20297093): Hello OPAL!
20297706: (20297704): _start = 0x20010000
20310291: (20309985): _bss   = 0x20017628
20322876: (20322266): _stack = 0x20018000
20335461: (20334547): _end   = 0x2001B000
20348055: (20346837): KPCR   = 0x20017648
20360650: (20359128): OPAL   = 0x30000000
20373234: (20371408): FDT    = 0x303039F0
20442089: (20439959): SLB size = 0x20
20484687: (20482481): TB freq = 512000000
20501494: (20498946): [20497021000,3] OPAL: Trying a CPU re-init with flags: 0x2
20510436: (20507888): [20502734000,3] SLW: Not found on chip 0
20514673: (20512125): [20510689000,3] ELOG: Error getting buffer to log error
20515387: (20512839): OPAL claims no HILE supported, pretend to know better...
20549204: (20546656): Unrecoverable exception stack top @ 0x20019EC8
20577591: (20574739): Recoverable exception stack top @ 0x2001B000
20607679: (20604521): HTAB (2048 ptegs, mask 0x7FF, size 0x40000) @ 0x20040000
20773861: (20769941): SLB entries:
20782057: (20778099): 1: E 0x8000000 V 0x4000000000000400
20805685: (20800853): EA 0x20010000 -> hash 0x20010 -> pteg 0x80 = RA 0x20010000
20842311: (20836603): EA 0x20011000 -> hash 0x20011 -> pteg 0x88 = RA 0x20011000
20878937: (20872353): EA 0x20012000 -> hash 0x20012 -> pteg 0x90 = RA 0x20012000
20915563: (20908103): EA 0x20013000 -> hash 0x20013 -> pteg 0x98 = RA 0x20013000
20952189: (20943853): EA 0x20014000 -> hash 0x20014 -> pteg 0xA0 = RA 0x20014000
20988815: (20979603): EA 0x20015000 -> hash 0x20015 -> pteg 0xA8 = RA 0x20015000
21025441: (21015353): EA 0x20016000 -> hash 0x20016 -> pteg 0xB0 = RA 0x20016000
21062067: (21051103): EA 0x20017000 -> hash 0x20017 -> pteg 0xB8 = RA 0x20017000
21098693: (21086853): EA 0x20018000 -> hash 0x20018 -> pteg 0xC0 = RA 0x20018000
21135319: (21122603): EA 0x20019000 -> hash 0x20019 -> pteg 0xC8 = RA 0x20019000
21171945: (21158353): EA 0x2001A000 -> hash 0x2001A -> pteg 0xD0 = RA 0x2001A000

21209691: (21195223): Pick your poison:
21220690: (21206222): Choices: (MMU = disabled):
21236538: (21222070):    (d) 5s delay
21245911: (21231443):    (e) test exception
21258788: (21244320):    (n) test nested exception
21275753: (21261285):    (f) dump FDT
21285126: (21270658):    (M) enable MMU
21295667: (21281199):    (m) disable MMU
21306792: (21292324):    (I) enable ints
21317917: (21303449):    (i) disable ints
21329626: (21315158):    (H) enable HV dec
21341919: (21327451):    (h) disable HV dec
21354796: (21340328):    (q) poweroff

You can interact with this:
(d) poll the timebase registers until 5s of real time pass.
(e) tests triggering a system call with parameter 0xfeed. The system
    call handler will return back parameter << 16 | 0xface, i.e. 0xfeedface.
(n) tests triggering an exception from an exception by triggering
    a system call with parameter 0xdead. The exc.c logic keys off the parameter
    to trigger another exception, expectedly crashing the system, thus testing
    that the exc.c code can distinguish between recoverable and non-recoverable
    exceptions and handle them appropriately.
(f) dumps the FDT passed up by skiboot. I don't try very hard. This code needs
    improvement and its just glue around parts of libfdt.
(M) enables running with MSR.IR and MSR.DR. The page table and SLB are setup at
    boot to map 1:1 (EA->RA) exactly the memory between &_start and &_end. Any
    DSI/ISI turns off the MMU.
(m) disables MSR.IR and MSR.DR, disabling MMU.
(I) enables external interrupts (MSR.EE). You will start seeing decrementer
    exceptions.
(i) disables external interrupts. You will no longer see any decrementer
    or HV decrementer exceptions.
(H) enables HV decrementer. If exernal interrupts are on, you will start
    seeting hypervisor decrementer exceptions.
(h) disable HV decrementer. You will no longer see any HV decrementer
    exceptions.
(q) will shut down the sim using the attn instruction.

You should be able to run ppc64le_hello on a real Power8 machine via skiboot,
but you will need to comment out the call to mambo_write, as that is a
simulator-only facility.

Wish I had Power8 kit to play with ;-(.

Issues
======

Q: Delay test seems to run longer or shorter than 5s wall clock.
A: From benh: "The way mambo (aka systemsim) works, there is no expectation that the
               simulated timebase has any relationship whatsoever to wall clock outside
               of sim. All you can do really is play with the ratio emulated CPU
               cycles / TB cycles."
   ...change processor/cpu_frequency and processor/timebase_frequency. On my
   machine (i5-2410M) the TB should run about 1000 times faster than clock.

Resources
=========

Useful stuff:
- PowerISA_V2.07_PUBLIC.pdf            - Book 3S
- ABI53BitOpenPOWER_21July2014_pub.pdf - ELFv2 ABI used for PPC64LE

Contact Info
============

Andrei Warkentin (andrey.warkentin@gmail.com).
