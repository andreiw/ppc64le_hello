ppc64le_hello - ``Hello World'' for a Little-Endian OpenPower world
===================================================================

This is an example of running a 64-bit little-endian payload using
skiboot (https://github.com/open-power/skiboot) or another OPAL
firmware.

It shows the bare minimum needed to start writing
a little-endian kernel for the OpenPower ecosystem. Whereas
skiboot/test/hello_world is big-endian, this shows how
to make OPAL calls from LE as well as other minutiae like
setting up a basic C environment.

What you get:
- 64-bit real-mode HV LE operation
- logging via sim inteface (mambo_write)
- logging via OPAL firmware (opal_write)
- calling C code, stack/BSS/linkage setup/TOC
- calling BE code from LE
- FDT parsing, dumping FDT
- Taking and returning from exceptions, handling
  unrecoverable/nested exceptions.
- Timebase (i.e. the "timestamp counter"), decrementer
  and hypervisor decrementer manipulation.
- Running at HV alias addresses (loaded at 0x00000000200XXXXX,
  linked at 0x80000000200XXXXX). The idea being that the code
  will access physical RAM and its own data structures solely
  using the HV addresses.
- Very basic MMU setup. 1:1 EA->VA @ 0x0 mapping using a 1TB
  SLB entry, and a EA->VA SLBE covering 1TB for the HV alias
  range. 1:1 VA->RA mapping and mixed page support (4K and 16M).
  Base page size is 4K, and actual page size is 4K and 16M.
  Not SMP safe. Any access within the HV alias addresses
  get mapped in. Any faults to other unmapped locations are
  crashes, as addresses below 0x8000000000000000 should only
  be explicit maps.
- Running unpriviledged code.

Hopefully the code is clear enough and not too messy. I'm not trying hard
enough ;-(. I think the only code that has had any thought put into it
is the exception vectors, and other places look especially crappy because
I wanted to avoid writing an actual kernel.

Building
========

You will need a LE 64-bit toolchain to build (i.e. powerpc64le-linux-gnu-gcc).
For building skiboot (for testing) you will also need the BE 64-bit
toolchain (i.e. powerpc64-linux-gnu-gcc).

Skiboot is pulled-in as a submodule. 

You will need the POWER8 Functional Simulator set up. Good directions: https://www.flamingspork.com/blog/2014/12/03/running-skiboot-opal-on-the-power8-simulator/

$ make

Running
=======

$ make test

This will run the simulator and pop-up an xterm for OPAL console 0. If you
don't like xterm, feel free to change it in ppc64le_hello.tcl.

You're looking for output like -
...
20295980: (20295980): [20289411000,5] INIT: Starting kernel at 0x20010000, fdt at 0x303039f0 (size 0x13b4)
20296464: (20296462): Hello Mambo!
20297277: (20297275): Hello OPAL!
20297940: (20297938): _start = 0x8000000020010000
20317142: (20316532): _bss   = 0x8000000020018F38
20336344: (20335126): _stack = 0x800000002001A000
20355546: (20353720): _end   = 0x800000002001D000
20374757: (20372323): KPCR   = 0x8000000020018F70
20393969: (20390927): TOC    = 0x8000000020020F00
20413181: (20409531): OPAL   = 0x30000000
20426878: (20422924): FDT    = 0x303039F0
20496879: (20492621): SLB size = 0x20
20540378: (20536044): TB freq = 512000000
20558253: (20553577): [20553780000,3] OPAL: Trying a CPU re-init with flags: 0x2
20567195: (20562519): [20559493000,3] SLW: Not found on chip 0
20571432: (20566756): [20567448000,3] ELOG: Error getting buffer to log error
20572198: (20567522): OPAL claims no HILE supported, pretend to know better...
20609089: (20604413): Unrecoverable exception stack top @ 0x800000002001BEC8
20649004: (20643715): HTAB (2048 ptegs, mask 0x7FF, size 0x40000) @ 0x8000000020040000
20823831: (20817476): SLB entries:
20832769: (20826376): 1: E 0x8000000008000000 V 0x4000000000000400
20863832: (20856185): 2: E 0x8000000 V 0x4000000000000400

20890603: (20882082): Pick your poison:
20902609: (20894088): Choices: (MMU = disabled):
20919920: (20911399):    (d) 5s delay
20930141: (20921620):    (e) test exception
20944184: (20935663):    (n) test nested exception
20962686: (20954165):    (f) dump FDT
20972907: (20964386):    (M) enable MMU
20984402: (20975881):    (m) disable MMU
20996534: (20988013):    (t) test MMU
21006755: (20998234):    (T) test MMU 16mb pages
21023983: (21015462):    (u) test non-priviledged code
21045033: (21036512):    (I) enable ints
21057165: (21048644):    (i) disable ints
21069934: (21061413):    (H) enable HV dec
21083340: (21074819):    (h) disable HV dec
21097383: (21088862):    (q) poweroff

You can interact with this:
---------------------------
(d) poll the timebase registers until 5s of real time pass.
(e) tests triggering a system call with parameter 0xfeed. The system
    call handler will return back parameter << 16 | 0xface, i.e. 0xfeedface.
(n) tests triggering an exception from an exception by triggering
    a system call with parameter 0xdead. The exc.c logic keys off the parameter
    to trigger another exception, expectedly crashing the system, thus testing
    that the exc.c code can distinguish between recoverable and non-recoverable
    exceptions and handle them appropriately.
(f) dumps the FDT passed up by skiboot. I don't try very hard. This code needs
    improvement and its just glue around parts of libfdt.
(M) enables running with MSR.IR and MSR.DR. HTAB and memory between &_start
    and &_end are mapped. Any  DSI/ISI turns off the MMU. Exceptions never keep
    MMU on inside the exceptions.
(m) disables MSR.IR and MSR.DR, disabling MMU.
(t) simple test for MMU code, mapping the same EA to different RAs and verifying
    that the 4K mapping worked.
(T) simple 16MB page size mapping test.
(u) shows running unpriviledged code. There's no scheduler, process/thread
    support so the hand-off between code is messy. We enter user code via
    syscall, saving off the exception frame for a subsequent return from user
    code, again via syscall.
(I) enables external interrupts (MSR.EE). You will start seeing decrementer
    exceptions.
(i) disables external interrupts. You will no longer see any decrementer
    or HV decrementer exceptions.
(H) enables HV decrementer. If exernal interrupts are on, you will start
    seeting hypervisor decrementer exceptions.
(h) disable HV decrementer. You will no longer see any HV decrementer
    exceptions.
(q) will shut down the sim using the attn instruction.

You should be able to run ppc64le_hello on a real Power8 machine via skiboot,
but you will need to comment out the call to mambo_write, as that is a
simulator-only facility.

Wish I had Power8 kit to play with ;-(.

Issues
======

Q: Delay test seems to run longer or shorter than 5s wall clock.
A: From benh: "The way mambo (aka systemsim) works, there is no expectation
               that the simulated timebase has any relationship whatsoever
               to wall clock outside of sim. All you can do really is play
               with the ratio emulated CPU cycles / TB cycles."
   ...change processor/cpu_frequency and processor/timebase_frequency
   inside ppc64le_hello.tcl. On my machine (i5-2410M) the TB should run
   about 1000 times faster than clock.

TODO
====

- Maybe show more callthru sim facilities? Like file I/O...
- Spinlocks

Resources
=========

Useful stuff:
- PowerISA_V2.07_PUBLIC.pdf             - Book 3S
- ABI53BitOpenPOWER_21July2014_pub.pdf  - ELFv2 ABI used for PPC64LE
- P8_um_external_v1.1_2015JAN29_pub.pdf - POWER8 User Manual

Contact Info
============

Andrei Warkentin (andrey.warkentin@gmail.com).
